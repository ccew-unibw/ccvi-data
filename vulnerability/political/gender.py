import pandas as pd

from base.objects import Indicator, ConfigParser, GlobalBaseGrid
from base.datasets import SubnationalHDIData, HDIData, VDemData
from utils.data_processing import min_max_scaling, process_yearly_data
from vulnerability.shared import VulnerabilityMixin


class VulPoliticalGender(Indicator, VulnerabilityMixin):
    def __init__(
        self,
        config: ConfigParser,
        grid: GlobalBaseGrid,
        pillar: str = "VUL",
        dim: str = "political",
        id: str = "gender",
    ):
        """Params defining indicator's place in index set to designed hierarchy by default"""
        self.shdi = SubnationalHDIData(config=config)
        self.hdi = HDIData(config=config)
        self.vdem = VDemData(config=config)
        super().__init__(pillar=pillar, dim=dim, id=id, config=config, grid=grid)

    def load_data(self) -> tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
        df_hdi = self.hdi.load_data(["gii"])
        df_shdi = self.shdi.load_data(["sgdi"])
        df_vdem = self.vdem.load_data(["v2xpe_exlgender"])
        return df_hdi, df_shdi, df_vdem

    def preprocess_data(
        self, input_data: tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]
    ) -> pd.DataFrame:
        df_hdi, df_shdi, df_vdem = input_data
        df_base = self.create_base_df()
        df_vdem = self.vdem.preprocess_data(df_vdem)
        df_hdi = self.hdi.preprocess_data(df_hdi)
        df_shdi = self.shdi.preprocess_data(df_shdi, df_base, self.grid)
        df_yearly = pd.merge(
            df_hdi[["gii"]],
            df_vdem[["v2xpe_exlgender"]],
            left_index=True,
            right_index=True,
            how="outer",
        )
        df_yearly_gridded = process_yearly_data(df_base, df_yearly, ["gii", "v2xpe_exlgender"])
        # merge and impute
        df_preprocessed = pd.concat(
            [df_base, df_shdi, df_yearly_gridded[["gii", "v2xpe_exlgender"]]], axis=1
        )
        df_preprocessed = self.clip_fill_data(
            df_preprocessed[["gii", "v2xpe_exlgender", "sgdi"]], resolution="gq", require_all=False
        )
        # there is very(!) little gender imbalance that favors women, so we cut this off for a clear scaling from imbalanced
        # to fully balanced. since the indicator is a relative measure between female and male indicators, we use a
        # quantile-based threshold for the lower end
        threshold = df_preprocessed.loc[(slice(None), slice(2012, 2020)), "sgdi"].quantile(0.01)
        # also need to reverse the score to have the same directionality as the other sources
        df_preprocessed["sgdi"] = 1 - min_max_scaling(
            df_preprocessed["sgdi"], minv=threshold, maxv=1
        )
        df_preprocessed = pd.concat([df_base, df_preprocessed], axis=1)
        return df_preprocessed

    def create_indicator(self, df) -> tuple[pd.DataFrame, pd.DataFrame]:
        df[self.composite_id] = df[["gii", "v2xpe_exlgender", "sgdi"]].mean(axis=1)
        return df

    def normalize(self, df_indicator: pd.DataFrame) -> pd.DataFrame:
        """No normalization necessary since 0-1 index scores."""
        return df_indicator[[self.composite_id]]


# this is possible by adding the root folder as the PYTHONPATH var in .env
if __name__ == "__main__":
    config = ConfigParser()
    grid = GlobalBaseGrid(config)
    indicator = VulPoliticalGender(config=config, grid=grid)
    indicator.run()
