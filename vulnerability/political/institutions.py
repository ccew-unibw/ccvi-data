import pandas as pd

from base.objects import Indicator, ConfigParser, GlobalBaseGrid
from base.datasets import WBData, VDemData, CPIData
from utils.data_processing import min_max_scaling, process_yearly_data
from vulnerability.shared import VulnerabilityMixin


class VulPoliticalInstitutions(Indicator, VulnerabilityMixin):
    def __init__(
        self,
        config: ConfigParser,
        grid: GlobalBaseGrid,
        pillar: str = "VUL",
        dim: str = "political",
        id: str = "institutions",
    ):
        """Params defining indicator's place in index set to designed hierarchy by default"""
        self.vdem = VDemData(config=config)
        # Worldwide Governance Indicators are accessible through World Bank
        self.wgi = WBData(config=config)
        self.cpi = CPIData(config=config)
        super().__init__(pillar=pillar, dim=dim, id=id, config=config, grid=grid)

    def load_data(self) -> tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
        df_vdem = self.vdem.load_data(["v2x_rule"])
        df_cpi = self.cpi.load_data()
        wgi_indicators = {"RL.EST": "rl"}  # WGI Rule of Law
        df_wgi = self.wgi.load_data(wgi_indicators)
        return df_vdem, df_cpi, df_wgi

    def preprocess_data(
        self, input_data: tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]
    ) -> pd.DataFrame:
        df_vdem, df_cpi, df_wgi = input_data
        df_vdem = self.vdem.preprocess_data(df_vdem)
        df_cpi = self.cpi.preprocess_data(df_cpi)
        # combine data and merge to index structure
        df_base = self.create_base_df()
        df_yearly = pd.concat([df_vdem, df_cpi, df_wgi], axis=1)
        df_preprocessed = process_yearly_data(df_base, df_yearly, df_yearly.columns)

        # rescale based on "natural" boundaries
        min_max = {
            "cpi_score": (0, 100),
            "v2x_rule": (0, 1),  # this doesn't change the scores, simply for clarity
            "rl": (-2.5, 2.5),
        }
        for var in min_max:
            df_preprocessed[f"{var}_norm"] = min_max_scaling(
                df_preprocessed[var], minv=min_max[var][0], maxv=min_max[var][1]
            )

        df_preprocessed = self.clip_fill_data(
            df_preprocessed[["cpi_score_norm", "v2x_rule_norm", "rl_norm"]],
            resolution="gq",
            require_all=False,
        )
        df_preprocessed = pd.concat([df_base, df_preprocessed], axis=1)
        return df_preprocessed

    def create_indicator(self, df) -> tuple[pd.DataFrame, pd.DataFrame]:
        df[self.composite_id] = 1 - df[["cpi_score_norm", "v2x_rule_norm", "rl_norm"]].mean(axis=1)
        return df

    def normalize(self, df_indicator: pd.DataFrame) -> pd.DataFrame:
        """No normalization necessary since 0-1 index scores."""
        return df_indicator[[self.composite_id]]


# this is possible by adding the root folder as the PYTHONPATH var in .env
if __name__ == "__main__":
    config = ConfigParser()
    grid = GlobalBaseGrid(config)
    indicator = VulPoliticalInstitutions(config=config, grid=grid)
    indicator.run()
