import geopandas as gpd
import numpy as np
import pandas as pd

from base.objects import Indicator, ConfigParser, GlobalBaseGrid
from base.datasets import EPRData, VDemData
from utils.data_processing import min_max_scaling, process_yearly_data
from utils.spatial_operations import create_diffusion_layers
from vulnerability.shared import VulnerabilityMixin


class VulPoliticalEthnic(Indicator, VulnerabilityMixin):
    def __init__(
        self,
        config: ConfigParser,
        grid: GlobalBaseGrid,
        pillar: str = "VUL",
        dim: str = "political",
        id: str = "ethnic",
    ):
        """Params defining indicator's place in index set to designed hierarchy by default"""
        self.epr = EPRData(config=config)
        self.vdem = VDemData(config=config)
        super().__init__(pillar=pillar, dim=dim, id=id, config=config, grid=grid)

    def load_data(self) -> tuple[pd.DataFrame, gpd.GeoDataFrame, pd.DataFrame]:
        df_epr, gdf_epr = self.epr.load_data()
        df_vdem = self.vdem.load_data(["v2xpe_exlsocgr"])
        return df_epr, gdf_epr, df_vdem

    def preprocess_data(
        self, input_data: tuple[pd.DataFrame, gpd.GeoDataFrame, pd.DataFrame]
    ) -> pd.DataFrame:
        df_epr, gdf_epr, df_vdem = input_data
        df_vdem = self.vdem.preprocess_data(df_vdem)
        epr_merged = self.epr.preprocess_data(df_epr, gdf_epr)
        df_base = self.create_base_df()
        epr_merged = self.epr.calculate_excluded_groups(
            df_base, epr_merged, self.indicator_config["buffer_size"]
        )
        # matching and merging
        df_vdem = process_yearly_data(df_base, df_vdem, ["v2xpe_exlsocgr"])
        df_preprocessed = pd.concat(
            [df_base, epr_merged[["excluded_number"]], df_vdem[["v2xpe_exlsocgr"]]], axis=1
        )
        df_groups = self.clip_fill_data(
            df_preprocessed[["excluded_number", "v2xpe_exlsocgr"]], resolution="gq"
        )
        # copy clip_filled data back to df_preprocessed to keep the helper cols for now
        for col in df_groups.columns:
            df_preprocessed[col] = df_groups[col]
        return df_preprocessed

    def create_indicator(self, df_preprocessed: pd.DataFrame) -> pd.DataFrame:
        # calculate indicator
        df_indicator = create_diffusion_layers(df_preprocessed, ["excluded_number"], False)
        df_indicator = pd.concat([df_preprocessed, df_indicator], axis=1)
        df_indicator["epr_processed"] = df_indicator["excluded_number_diffusion_sum"].apply(
            np.log1p
        )
        df_indicator["epr_processed"] = min_max_scaling(
            df_indicator["epr_processed"], minv=0, maxv=1
        )
        df_indicator[self.composite_id] = (
            df_indicator["epr_processed"] * df_indicator["v2xpe_exlsocgr"]
        )
        return df_indicator

    def normalize(self, df: pd.DataFrame):
        threshold = df.loc[
            (slice(None), slice(None, 2020), slice(None)), self.composite_id
        ].quantile(0.99)
        df[self.composite_id] = min_max_scaling(df[self.composite_id], minv=0, maxv=threshold)
        return df[[col for col in df.columns if self.composite_id in col]]

    def add_raw_value(
        self, df_indicator: pd.DataFrame, df_preprocessed: pd.DataFrame
    ) -> pd.DataFrame:
        df_indicator[f"{self.composite_id}_raw"] = df_preprocessed["excluded_number"]
        return df_indicator


# this is possible by adding the root folder as the PYTHONPATH var in .env
if __name__ == "__main__":
    config = ConfigParser()
    grid = GlobalBaseGrid(config)
    indicator = VulPoliticalEthnic(config=config, grid=grid)
    indicator.run()
