import pandas as pd

from base.objects import Indicator, ConfigParser, GlobalBaseGrid
from base.datasets import EPRData, VDemData
from utils.data_processing import process_yearly_data
from vulnerability.shared import VulnerabilityMixin


class VulPoliticalEthnic(Indicator, VulnerabilityMixin):
    def __init__(
        self,
        config: ConfigParser,
        grid: GlobalBaseGrid,
        pillar: str = "VUL",
        dim: str = "political",
        id: str = "ethnic",
    ):
        """Params defining indicator's place in index set to designed hierarchy by default"""
        self.epr = EPRData(config=config)
        self.vdem = VDemData(config=config)
        super().__init__(pillar=pillar, dim=dim, id=id, config=config, grid=grid)

    def load_data(self) -> tuple[pd.DataFrame, pd.DataFrame]:
        df_epr = self.epr.load_data()
        df_vdem = self.vdem.load_data(["v2xpe_exlsocgr"])
        return df_epr, df_vdem

    def preprocess_data(self, input_data: tuple[pd.DataFrame, pd.DataFrame]) -> pd.DataFrame:
        df_epr, df_vdem = input_data
        df_vdem = self.vdem.preprocess_data(df_vdem)
        df_epr = self.epr.preprocess_data(df_epr)
        df_excluded = df_epr.loc[df_epr["status"].isin(["DISCRIMINATED", "POWERLESS"])]
        df_excluded = df_excluded.groupby(["iso3", "year"])["size"].sum().rename("excluded_share")
        df_yearly = pd.concat([df_vdem, df_excluded], axis=1).sort_index()
        df_yearly = self.clip_fill_data(df_yearly, resolution="cy")

        # matching and merging to data structure
        df_base = self.create_base_df()
        df_preprocessed = process_yearly_data(df_base, df_yearly, df_yearly.columns)
        return df_preprocessed

    def create_indicator(self, df_preprocessed: pd.DataFrame) -> pd.DataFrame:
        # calculate indicator
        df_indicator = df_preprocessed[["excluded_share", "v2xpe_exlsocgr"]].mean(axis=1)
        df_indicator = df_indicator.rename(self.composite_id).to_frame()
        return df_indicator

    def normalize(self, df_indicator: pd.DataFrame):
        """No normalization necessary."""
        return df_indicator[[col for col in df_indicator.columns if self.composite_id in col]]


# this is possible by adding the root folder as the PYTHONPATH var in .env
if __name__ == "__main__":
    config = ConfigParser()
    grid = GlobalBaseGrid(config)
    indicator = VulPoliticalEthnic(config=config, grid=grid)
    indicator.run()
