import itertools
import os

import numpy as np
import pandas as pd
from rich.progress import Progress
import rioxarray as rxr

from base.datasets import LGRIPData
from base.objects import Indicator, ConfigParser, GlobalBaseGrid
from vulnerability.shared import VulnerabilityMixin

class VulEnvironmentalIrrigation(Indicator, VulnerabilityMixin):
    def __init__(
        self,
        config: ConfigParser,
        grid: GlobalBaseGrid,
        pillar: str = "VUL",
        dim: str = "environmental",
        id: str = "irrigation",
    ):
        """Params defining indicator's place in index set to designed hierarchy by default"""
        self.lgrip = LGRIPData(config=config)
        super().__init__(pillar=pillar, dim=dim, id=id, config=config, grid=grid)

    def load_data(self) -> None:
        self.lgrip.load_data()
        return
    
    def preprocess_data(self, *args, **kwargs) -> pd.DataFrame:
        assert self.lgrip.data_loaded
        df_preprocessed = self.lgrip.create_grid_aggregates(self.grid)
        return df_preprocessed
    
    def create_indicator(self, df: pd.DataFrame) -> pd.DataFrame:
        df['cropland_share'] = (df["cropland_irrigated"] + df["cropland_rainfed"]) / (df.sum(axis=1) - df["water"])
        df[self.composite_id] = df["cropland_rainfed"] / (df["cropland_irrigated"] + df["cropland_rainfed"])
        # The indicator only makes sense if we have at least a little bit of cropland in the cell overall
        cropland_threshold=0.01
        df[self.composite_id] = df.apply(
            lambda x: x[self.composite_id] if x["cropland_share"] > cropland_threshold else np.nan, axis=1
        )
        #TODO: create base df and merge for Q4 2015 (Doublecheck static date!)
        return df
    
    def normalize(self, df_indicator: pd.DataFrame) -> pd.DataFrame:
        """No normalization required"""
        return df_indicator


# this is possible by adding the root folder as the PYTHONPATH var in .env
if __name__ == "__main__":
    config = ConfigParser()
    grid = GlobalBaseGrid(config)
    indicator = VulEnvironmentalIrrigation(config=config, grid=grid)
    indicator.run()
