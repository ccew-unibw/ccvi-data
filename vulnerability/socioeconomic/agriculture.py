from typing import Any
import pandas as pd

from base.objects import Indicator, ConfigParser, GlobalBaseGrid
from base.datasets import ILOData, WBData
from utils.data_processing import min_max_scaling, process_yearly_data
from vulnerability.shared import VulnerabilityMixin


class VulSocioeconomicAgriculture(Indicator, VulnerabilityMixin):
    def __init__(
        self,
        config: ConfigParser,
        grid: GlobalBaseGrid,
        pillar: str = "VUL",
        dim: str = "socioeconomic",
        id: str = "agriculture",
    ):
        """Params defining indicator's place in index set to designed hierarchy by default"""
        self.ilo = ILOData(config=config)
        self.wb = WBData(config=config)
        super().__init__(pillar=pillar, dim=dim, id=id, config=config, grid=grid)

    def load_data(self) -> tuple[dict[str, Any], pd.DataFrame]:
        # model version names need to match the indicators with the suffix "_model"
        ilo_indicators = {
            "EMP_TEMP_SEX_ECO_NB_A": "agr_sector_share",  # Employment by sex and economic activity (thousands) -- Annual
            "EMP_2EMP_SEX_ECO_NB_A": "agr_sector_share_model",  # Employment by sex and economic activity -- ILO modelled estimates, Nov. 2023 (thousands) -- Annual
            "EAP_DWAP_SEX_AGE_RT_A": "labor_force_participation",  # Labour force participation rate by sex and age (%) -- Annual
            "EAP_2WAP_SEX_AGE_RT_A": "labor_force_participation_model",  # Labour force participation rate by sex and age (%) -- Annual
        }
        ilo_dict = self.ilo.load_data(ilo_indicators)

        wb_indicators = {"NV.AGR.TOTL.ZS": "agr_value_added"}
        df_wb = self.wb.load_data(wb_indicators)
        return ilo_dict, df_wb

    def preprocess_data(self, input_data: tuple[dict[str, Any], pd.DataFrame]) -> pd.DataFrame:
        ilo_dict, df_wb = input_data
        df_ilo = self.ilo.preproces_data_agrdep(ilo_dict)
        df_yearly = pd.concat([df_wb, df_ilo], axis=1)
        df_yearly = self.clip_fill_data(df_yearly)
        # adjust scales
        df_yearly["labor_force_participation"] = df_yearly["labor_force_participation"] / 100
        df_yearly["agr_value_added"] = df_yearly["agr_value_added"] / 100
        return df_yearly

    def create_indicator(self, df_preprocessed) -> tuple[pd.DataFrame, pd.DataFrame]:
        df_preprocessed["labor_force_agriculture"] = (
            df_preprocessed["labor_force_participation"] * df_preprocessed["agr_sector_share"]
        )
        df_preprocessed[self.composite_id] = df_preprocessed[
            ["labor_force_agriculture", "agr_value_added"]
        ].mean(axis=1)
        df_base = self.create_base_df()
        df_indicator = process_yearly_data(df_base, df_preprocessed, [self.composite_id])
        return df_indicator, df_preprocessed

    def normalize(self, input_data: tuple[pd.DataFrame, pd.DataFrame]) -> pd.DataFrame:
        df_indicator, df_yearly = input_data
        # use country-level data for threshold
        threshold = (
            df_yearly.sort_index()
            .loc[(slice(None), slice(None, 2020)), self.composite_id]
            .quantile(0.99)
        )
        df_indicator[self.composite_id] = min_max_scaling(
            df_indicator[self.composite_id], minv=0, maxv=threshold
        )
        return df_indicator[[self.composite_id]]


if __name__ == "__main__":
    config = ConfigParser()
    grid = GlobalBaseGrid(config)
    indicator = VulSocioeconomicAgriculture(config=config, grid=grid)
    indicator.run()
