import pandas as pd

from base.objects import Indicator, ConfigParser, GlobalBaseGrid
from base.datasets import SDGData
from utils.data_processing import default_impute, min_max_scaling, process_yearly_data


class VulSocioeconomicHunger(Indicator):
    def __init__(
        self,
        config: ConfigParser,
        grid: GlobalBaseGrid,
        pillar: str = "VUL",
        dim: str = "socioeconomic",
        id: str = "hunger",
    ):
        """Params defining indicator's place in index set to designed hierarchy by default"""
        self.sdg = SDGData(config=config)
        super().__init__(pillar=pillar, dim=dim, id=id, config=config, grid=grid)

    def load_data(self) -> pd.DataFrame:
        df_sdg = self.sdg.load_data(["SN_ITK_DEFC"])
        return df_sdg

    def preprocess_data(self, df_sdg: pd.DataFrame) -> pd.DataFrame:
        df_sdg = self.sdg.preprocess_data(df_sdg)
        # percent to percentage
        df_sdg["SN_ITK_DEFC"] = df_sdg["SN_ITK_DEFC"] / 100
        df_sdg = default_impute(df_sdg, "year", "iso3")
        return df_sdg

    def create_indicator(self, df_sdg: pd.DataFrame) -> tuple[pd.DataFrame, pd.DataFrame]:
        df_sdg[self.composite_id] = df_sdg["SN_ITK_DEFC"]
        # 2.5 means <= 2.5 for raw values
        df_sdg[f"{self.composite_id}_raw"] = df_sdg["SN_ITK_DEFC"] * 100
        df_base = self.create_base_df()
        df_indicator = process_yearly_data(
            df_base, df_sdg, [c for c in df_sdg.columns if self.composite_id in c]
        )
        return df_indicator, df_sdg

    def normalize(self, input_data: tuple[pd.DataFrame, pd.DataFrame]) -> pd.DataFrame:
        df_indicator, df_sdg = input_data
        upper_limits = df_sdg.loc[(slice(None), slice(None, 2020)), self.composite_id].quantile(
            0.99
        )
        df_indicator[self.composite_id] = min_max_scaling(
            df_indicator[self.composite_id], maxv=upper_limits
        )
        return df_indicator[[c for c in df_indicator.columns if self.composite_id in c]]


if __name__ == "__main__":
    config = ConfigParser()
    grid = GlobalBaseGrid(config)
    indicator = VulSocioeconomicHunger(config=config, grid=grid)
    indicator.run()
