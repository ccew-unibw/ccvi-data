import pandas as pd

from base.objects import Indicator, ConfigParser, GlobalBaseGrid
from base.datasets import SubnationalHDIData, HDIData
from vulnerability.shared import HDIMixin


class VulSocioeconomicEducation(Indicator, HDIMixin):
    def __init__(
        self,
        config: ConfigParser,
        grid: GlobalBaseGrid,
        pillar: str = "VUL",
        dim: str = "socioeconomic",
        id: str = "education",
    ):
        """Params defining indicator's place in index set to designed hierarchy by default"""
        self.shdi = SubnationalHDIData(config=config)
        self.hdi = HDIData(config=config)
        super().__init__(pillar=pillar, dim=dim, id=id, config=config, grid=grid)

    def load_data(self) -> tuple[pd.DataFrame, pd.DataFrame]:
        df_hdi = self.hdi.load_data(["eys", "mys"])
        df_shdi = self.shdi.load_data(["edindex", "esch", "msch"])
        return df_hdi, df_shdi

    def preprocess_data(self, input_data: tuple[pd.DataFrame, pd.DataFrame]) -> pd.DataFrame:
        df_hdi, df_shdi = input_data
        df_base = self.create_base_df()
        df_hdi = self.hdi.preprocess_data(df_hdi)
        df_shdi = self.shdi.preprocess_data(df_shdi, df_base, self.grid)
        df_preprocessed = self.combine_subnational_national_hdi(df_base, df_hdi, df_shdi)
        return df_preprocessed

    def create_indicator(self, df_preprocessed) -> tuple[pd.DataFrame, pd.DataFrame]:
        df_preprocessed[self.composite_id] = 1 - df_preprocessed["edindex"]
        return df_preprocessed

    def normalize(self, df_indicator: pd.DataFrame) -> pd.DataFrame:
        """No normalization necessary."""
        return df_indicator[[self.composite_id]]


if __name__ == "__main__":
    config = ConfigParser()
    grid = GlobalBaseGrid(config)
    indicator = VulSocioeconomicEducation(config=config, grid=grid)
    indicator.run()
