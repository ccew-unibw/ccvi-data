import pandas as pd

from base.objects import Indicator, ConfigParser, GlobalBaseGrid
from base.datasets import WPPData
from utils.data_processing import (
    default_impute,
    min_max_scaling,
    process_yearly_data,
    create_data_structure_yearly,
)
from utils.index import get_quarter


class VulDemographicDependent(Indicator):
    def __init__(
        self,
        config: ConfigParser,
        grid: GlobalBaseGrid,
        pillar: str = "VUL",
        dim: str = "demographic",
        id: str = "dependent",
    ):
        """Params defining indicator's place in index set to designed hierarchy by default"""
        self.wpp = WPPData(config=config)
        super().__init__(pillar=pillar, dim=dim, id=id, config=config, grid=grid)

    def load_data(self) -> pd.DataFrame:
        df_wpp = self.wpp.load_data(variant="wpp_agegroups")
        return df_wpp

    def preprocess_data(self, df_wpp: pd.DataFrame) -> pd.DataFrame:
        df_wpp = self.wpp.preprocess_wpp(df_wpp)
        return df_wpp

    def create_indicator(self, df_wpp: pd.DataFrame) -> pd.DataFrame:
        df_wpp["dependence_ratio"] = (df_wpp["pop_youth"] + df_wpp["pop_old"]) / df_wpp[
            "pop_working"
        ]
        # merge to quarterly - we need full years for the quarter switching below to work for any time so using the yearly grid base
        quarter = get_quarter("last")
        df_base = self.create_base_df()
        df = create_data_structure_yearly(
            self.grid.load(), self.global_config["start_year"], quarter.year
        )
        df = process_yearly_data(df, df_wpp, ["dependence_ratio"], impute=False)
        # move the data from the default 4th to the 2nd quarter since its middle of the year estimates
        df = df.reset_index("quarter")
        df["quarter"] = df["quarter"].replace({2: 4, 4: 2})
        df = df.set_index("quarter", append=True).sort_index()
        df[f"{self.composite_id}_raw"] = default_impute(df["dependence_ratio"])
        df_indicator = df_base.merge(
            df[[f"{self.composite_id}_raw"]], how="left", left_index=True, right_index=True
        )
        return df_indicator

    def normalize(self, df: pd.DataFrame) -> pd.DataFrame:
        limits = (
            df.loc[(slice(None), slice(None, 2020), slice(None)), f"{self.composite_id}_raw"]
            .quantile([0.01, 0.99])
            .tolist()
        )
        df[self.composite_id] = min_max_scaling(
            df[f"{self.composite_id}_raw"], minv=limits[0], maxv=limits[1]
        )
        return df[[col for col in df.columns if self.composite_id in col]]


# this is possible by adding the root folder as the PYTHONPATH var in .env
if __name__ == "__main__":
    config = ConfigParser()
    grid = GlobalBaseGrid(config)
    indicator = VulDemographicDependent(config=config, grid=grid)
    indicator.run()
