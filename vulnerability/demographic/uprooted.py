import numpy as np
import pandas as pd

from base.objects import Indicator, ConfigParser, GlobalBaseGrid
from base.datasets import UNHCRData, WPPData
from utils.data_processing import default_impute, min_max_scaling, process_yearly_data
from utils.index import get_quarter


class VulDemographicUprooted(Indicator):
    def __init__(
        self,
        config: ConfigParser,
        grid: GlobalBaseGrid,
        pillar: str = "VUL",
        dim: str = "demographic",
        id: str = "uprooted",
    ):
        """Params defining indicator's place in index set to designed hierarchy by default"""
        self.unhcr = UNHCRData(config=config)
        self.wpp = WPPData(config=config)
        super().__init__(pillar=pillar, dim=dim, id=id, config=config, grid=grid)

    def load_data(self) -> tuple[pd.DataFrame, pd.DataFrame]:
        df_unhcr = self.unhcr.load_data()
        df_wpp = self.wpp.load_data()
        return df_unhcr, df_wpp

    def preprocess_data(self, input_data: tuple[pd.DataFrame, pd.DataFrame]) -> pd.DataFrame:
        df_unhcr, df_wpp = input_data
        df_unhcr = self.unhcr.preprocess_data(df_unhcr)
        df_wpp = self.wpp.preprocess_wpp(df_wpp)
        df_preprocessed = df_wpp[["pop_total", "pop_change"]].merge(
            df_unhcr[["forcibly_displaced"]], how="left", on=["iso3", "year"]
        )
        df_preprocessed = default_impute(df_preprocessed, location_index="iso3", time_index="year")
        df_preprocessed = df_preprocessed.loc[
            (slice(None), slice(self.global_config["start_year"], get_quarter("last").year)),
            slice(None),
        ]
        return df_preprocessed

    def create_indicator(self, df_preprocessed: pd.DataFrame) -> tuple[pd.DataFrame, pd.DataFrame]:
        df_preprocessed[f"{self.composite_id}_raw"] = (
            df_preprocessed["forcibly_displaced"] / df_preprocessed["pop_total"]
        )
        df_preprocessed[self.composite_id] = np.log1p(
            100 * df_preprocessed[f"{self.composite_id}_raw"]
        )
        df_base = self.create_base_df()
        df_indicator = process_yearly_data(
            df_base, df_preprocessed, [self.composite_id, f"{self.composite_id}_raw"]
        )
        return df_preprocessed, df_indicator

    def normalize(self, input_data: tuple[pd.DataFrame, pd.DataFrame]) -> pd.DataFrame:
        df_preprocessed, df_indicator = input_data
        threshold_uprooted = df_preprocessed.loc[
            (slice(None), slice(None, 2020)), self.composite_id
        ].quantile(0.99)
        df_indicator[self.composite_id] = min_max_scaling(
            df_indicator[self.composite_id], minv=0, maxv=threshold_uprooted
        )
        return df_indicator[[col for col in df_indicator.columns if self.composite_id in col]]


# this is possible by adding the root folder as the PYTHONPATH var in .env
if __name__ == "__main__":
    config = ConfigParser()
    grid = GlobalBaseGrid(config)
    indicator = VulDemographicUprooted(config=config, grid=grid)
    indicator.run()
