import pandas as pd

from base.objects import Indicator, ConfigParser, GlobalBaseGrid
from base.datasets import WPPData
from utils.data_processing import min_max_scaling, process_yearly_data


class VulDemographicPopgrowth(Indicator):
    def __init__(
        self,
        config: ConfigParser,
        grid: GlobalBaseGrid,
        pillar: str = "VUL",
        dim: str = "demographic",
        id: str = "popgrowth",
    ):
        """Params defining indicator's place in index set to designed hierarchy by default"""
        self.wpp = WPPData(config=config)
        super().__init__(pillar=pillar, dim=dim, id=id, config=config, grid=grid)

    def load_data(self) -> pd.DataFrame:
        df_wpp = self.wpp.load_data()
        return df_wpp

    def preprocess_data(self, df_wpp: pd.DataFrame) -> pd.DataFrame:
        df_wpp = self.wpp.preprocess_wpp(df_wpp)
        df_base = self.create_base_df(start_year=self.global_config["start_year"] - 1)
        df_preprocessed = process_yearly_data(df_base, df_wpp, ["pop_total"])
        return df_preprocessed

    def create_indicator(self, df: pd.DataFrame) -> pd.DataFrame:
        # pop growth is raw value
        for pgid in df.index.get_level_values("pgid").unique():
            df.loc[pgid, f"{self.composite_id}_raw"] = (
                df.loc[pgid].pop_total.diff(1) / df.loc[pgid].pop_total
            ).to_list()
        df = df.loc[
            (slice(None), slice(self.global_config["start_year"], None), slice(None)), slice(None)
        ].copy()
        return df

    def normalize(self, df: pd.DataFrame) -> pd.DataFrame:
        limit_growth = df.loc[
            (slice(None), slice(None, 2020), slice(None)), f"{self.composite_id}_raw"
        ].quantile(0.99)
        df[self.composite_id] = min_max_scaling(
            df[f"{self.composite_id}_raw"], minv=0, maxv=limit_growth
        )
        return df[[col for col in df.columns if self.composite_id in col]]


# this is possible by adding the root folder as the PYTHONPATH var in .env
if __name__ == "__main__":
    config = ConfigParser()
    grid = GlobalBaseGrid(config)
    indicator = VulDemographicPopgrowth(config=config, grid=grid)
    indicator.run()
